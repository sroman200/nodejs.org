pipeline {
    agent none
    options {
        // This is required if you want to clean before build
        skipDefaultCheckout(true)
    }
    environment {
      //CRED      = credentials('key-slave')
      BUILD_DIR = "{JENKINS_HOME}/workspace/nodejs/build"
      //HOME_DIR  = "/home/centos/jenkins/"
    }
     stages {
        stage("Env Variables") {
           agent {label 'slave'}
            steps {
                sh 'printenv'
                step([$class: 'WsCleanup'])
                checkout scm
            }
        }

        stage('check directory BUILD') { //----------------
          agent {label 'slave'}
          when {
            expression {
              return fileExists("${BUILD_DIR}")
              }
            }
          steps {
             echo "${BUILD_DIR} exists"
            }
        } //stage check
        stage('list') { //----------------
          agent { label 'slave' }
          steps{
            sh 'pwd && ls -lat'
            sh 'mkdir artifacts'
          }
       }//stage list

        stage('Docker-Build') {
          agent { label 'slave' }
          steps{
              sh 'sudo docker build -t npm-builder:last -f docker/Dockerfile_npm_builder .'
	            echo 'Docker Build Image Completed'
          }
        }
        stage('Docker-Run') {
          agent { label 'slave' }
          steps{
              sh 'sudo docker run --rm -v $(pwd)/artifacts:/app/build  npm-builder:last npm run build'
              sh 'tar -czf webpage-"${BUILD_ID}".tar.gz -C $(pwd)/artifacts .'
          }
        }
        stage('List DIR artifacts') { //----------------
          agent {label 'slave'}
          steps{
              sh 'ls -la artifacts'
          }
          post {
              success {
                      archiveArtifacts '*.tar.gz'
              }
          }
       }
        //stage('Publish Artifacts') {
        //agent { label 'slave' }
        //steps {
          //    archiveArtifacts '*.tar.gz'
        //}
       //}
     }   //stages
    post {
        //always {
        //    error "I AM FAILING NOW"
       // }
        success {
            echo "MOST DEFINITELY FINISHED"
        }
        failure {
            echo "I FAILED"
        }
        cleanup {
            echo "I RAN ANYWAY"
        }
    }
} // pipline
